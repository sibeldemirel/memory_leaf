// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  decks     Deck[]
  reviewSessions ReviewSession[]
}

model Deck {
  id        String   @id @default(uuid())
  name      String
  pathname  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  newCardsCount        Int     @default(0)
  learningCardsCount   Int     @default(0)
  reviewCardsCount     Int     @default(0)
  accuracyRate         Float   @default(0.0)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  cards Card[]
  reviewSessions ReviewSession[]
}

model Card {
  id        String   @id @default(uuid())
  question  String
  answer    String
  pathname  String
  dueDate   DateTime
  deckId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deck Deck @relation(fields: [deckId], references: [id])
}

model ReviewSession {
  id        String   @id @default(uuid())
  userId    String
  deckId    String
  startTime DateTime @default(now())
  endTime   DateTime?

  user User @relation(fields: [userId], references: [id])
  deck Deck @relation(fields: [deckId], references: [id])
}
